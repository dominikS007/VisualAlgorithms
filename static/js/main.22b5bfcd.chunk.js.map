{"version":3,"sources":["dataStructures/Node/Node.jsx","algorithms/dijkstra.js","algorithms/maze.js","algorithms/a-star.js","algorithms/randomWalls.js","dataStructures/VisualizerDataStructure.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","endNode","distance","visitedNodesInOrder","unvistedNodes","nodes","node","push","getNodes","length","sortNodesbyDistance","closestNode","shift","Infinity","isVisited","updateUnvistedNodes","neighbourNodes","filter","getUnvistedNodes","neighbour","previousNode","sort","nodeA","nodeB","maze","stack","fullstack","current","allNodes","next","checkNeighbours","pop","undefined","unshift","neighbours","checkGrid","x","y","max","top","right","bottom","left","r","Math","floor","random","checkNeighbourNodes","heuristic","a","b","sqrt","pow","removeFromArray","arr","elt","i","splice","randomWalls","RandomNumberMax","walls","VisualizerDataStructure","mouseIsPressed","initialGrid","setState","newGrid","drawWallsToggle","document","getElementById","f","h","nodesInShortestPathOrder","setTimeout","animatedShortestPath","firstNode","GRID_ROW","GRID_COL","nodesInShortestPath","currentNode","getNodesInShortestPath","animatedDijkstra","vistedNodes","shortestPathInOrder","animatedShortestPathAStar","openSet","closedSet","winner","g","j","includes","tempG","aStar","shortestPath","aStarAnimation","nodesVisited","mazeGenerationAnimation","wallList","randomWallsAnimation","onClick","dijkstraAlgorithm","aStarAlgorithm","mazeAlgorithm","randomWallsAlgorithm","animationClear","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22b5bfcd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisStart,\n\t\t\tisEnd,\n\t\t\tisWall,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseUp\n\t\t} = this.props;\n\t\tconst extraClassName = isEnd\n\t\t\t? \"node-end\"\n\t\t\t: isStart\n\t\t\t? \"node-start\"\n\t\t\t: isWall\n\t\t\t? \"node-wall\"\n\t\t\t: \"\";\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`node-${row}-${col}`}\n\t\t\t\tclassName={`node ${extraClassName}`}\n\t\t\t\tonMouseDown={() => onMouseDown(row, col)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t\tonMouseUp={() => onMouseUp()}\n\t\t\t></div>\n\t\t);\n\t}\n}\n","//https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\nexport function dijkstra(grid, startNode, endNode) {\n\tstartNode.distance = 0;\n\tconst visitedNodesInOrder = [];\n\tconst unvistedNodes = getNodes(grid);\n\n\twhile (!!unvistedNodes.length) {\n\t\tsortNodesbyDistance(unvistedNodes); // subs the two nodes\n\t\tconst closestNode = unvistedNodes.shift(); //will take the first element of the array and put in the varable\n\t\t//if the node is a wall\n\t\tif (closestNode.isWall) continue;\n\t\t//if the node is a node that has a value of infinity\n\t\t//which is a normal node so are we are \"stuck\"\n\t\tif (closestNode === Infinity) return visitedNodesInOrder;\n\t\tclosestNode.isVisited = true; // it has been visted so we set it to true\n\t\tvisitedNodesInOrder.push(closestNode); // then we will push the the array the closest node\n\t\t//when the closest node has reached the end node\n\t\tif (closestNode === endNode) return visitedNodesInOrder;\n\t\t//call the function that will increate the range of the search\n\t\tupdateUnvistedNodes(closestNode, grid);\n\t}\n}\n\n//functions that checks every node around it, in a cross shape, and if they have been visted\nfunction getUnvistedNodes(node, grid) {\n\tconst { row, col } = node;\n\tconst neighbourNodes = [];\n\tif (row > 0) neighbourNodes.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\n\tif (col > 0) neighbourNodes.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\n\treturn neighbourNodes.filter(neighbourNodes => !neighbourNodes.isVisited);\n}\n\n//updates the visited nodes\n//this function sets the current node \"set\" to a distance\nfunction updateUnvistedNodes(node, grid) {\n\tconst unvistedNodes = getUnvistedNodes(node, grid);\n\tfor (const neighbour of unvistedNodes) {\n\t\tneighbour.distance = node.distance + 1;\n\t\tneighbour.previousNode = node;\n\t}\n}\n\n//creates the grid\nfunction getNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tfor (const node of row) {\n\t\t\tnodes.push(node);\n\t\t}\n\t}\n\treturn nodes;\n}\n\nfunction sortNodesbyDistance(unvistedNodes) {\n\tunvistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n// this function basicly gets the shortest path\nexport function getNodesInShortestPath(endNode) {\n\tconst nodesInShortestPath = [];\n\tlet currentNode = endNode;\n\twhile (currentNode !== null) {\n\t\tnodesInShortestPath.unshift(currentNode);\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\treturn nodesInShortestPath;\n}\n","//there is a bug that it always does not get to one node,\n//that node is always next to the start node\n//https://en.wikipedia.org/wiki/Maze_generation_algorithm\nexport function maze(grid, startNode) {\n\tconst stack = []; //used for the the backtracking\n\tconst fullstack = []; //used for animation\n\tvar current = startNode;\n\tconst allNodes = getNodes(grid);\n\n\t//stack.push(startNode);\n\tvar next = checkNeighbours(current, grid);\n\n\t//while true\n\twhile (!!allNodes) {\n\t\t//backtracking so if the node has no neighbours they will be null\n\t\t//therfore will pop from the stack to reach the\n\t\t//pervious node that has a neighbour\n\t\twhile (current === null) {\n\t\t\tcurrent = stack.pop();\n\t\t}\n\t\t//this array is used for the animation so that when it\n\t\t//backtracks you can see when it does it\n\t\tif (current === undefined) {\n\t\t\tfullstack.unshift(startNode);\n\t\t\treturn fullstack;\n\t\t}\n\t\tnext = checkNeighbours(current, grid);\n\t\tif (next !== null) {\n\t\t\tfullstack.push(next);\n\t\t}\n\t\tstack.push(next);\n\t\tcurrent = next;\n\t}\n}\n\n//Makes a \"grid\" so that you can see all the nodes in the current grid, good for debuging\nfunction getNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tfor (const node of row) {\n\t\t\tnodes.push(node);\n\t\t}\n\t}\n\treturn nodes;\n}\n//this functions is to create a random number between 0 and a given number\nfunction getRandomNumber(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\n//funtions that returns a random neighbour of a node\nfunction checkNeighbours(node, grid) {\n\tconst { row, col } = node;\n\tconst neighbours = [];\n\n\t//this is for the edge case of the grid\n\tfunction checkGrid(x, y) {\n\t\tif (x < 0 || y < 0) {\n\t\t\tif (x === -1) x += 1;\n\t\t\tif (y === -1) y += 1;\n\t\t}\n\t\tif (x === grid.length) x -= 1;\n\t\treturn grid[x][y];\n\t}\n\n\t//gets all the possible neighbours\n\tvar top = checkGrid(row - 1, col);\n\tvar right = checkGrid(row, col + 1);\n\tvar bottom = checkGrid(row + 1, col);\n\tvar left = checkGrid(row, col - 1);\n\n\t//checks if the neighbours are valid possiblies\n\tif (typeof top === \"object\" && !top.isVisited) neighbours.push(top);\n\tif (typeof right === \"object\" && !right.isVisited) neighbours.push(right);\n\tif (typeof bottom === \"object\" && !bottom.isVisited)\n\t\tneighbours.push(bottom);\n\tif (typeof left === \"object\" && !left.isVisited) neighbours.push(left);\n\n\t//picks at random a neighbour and returns it\n\tif (neighbours.length > 0) {\n\t\tvar r = getRandomNumber(neighbours.length);\n\t\tneighbours[r].isVisited = true;\n\t\treturn neighbours[r];\n\t} else {\n\t\treturn null;\n\t}\n}\n","//f(x) = g(n)+h(n)\n//g  is the cost of the path from the start node to n\n//h is a heuristic function that estimates the cost of the cheapest path from n to the goal(endNode)\n//using the distance property of the node as the 'g' value\n//https://en.wikipedia.org/wiki/A*_search_algorithm\nexport function aStar(grid, startNode, endNode) {\n\tstartNode.distance = 0;\n\tconst openSet = [];\n\topenSet.push(startNode);\n\t// eslint-disable-next-line\n\tvar lastCheckedNode = startNode;\n\tconst closedSet = [];\n\n\t//main body\n\twhile (openSet.length > 0) {\n\t\tvar winner = 0; //this is the most efficient node to pick, hence winner\n\t\tfor (var i = 1; i < openSet.length; i++) {\n\t\t\tif (openSet[i].f < openSet[winner].f) {\n\t\t\t\twinner = i;\n\t\t\t}\n\t\t\t//if there is tie from the heuristics\n\t\t\tif (openSet[i].f === openSet[winner].f) {\n\t\t\t\t//explore options with longer known paths\n\t\t\t\tif (openSet[i].g > openSet[winner].g) {\n\t\t\t\t\twinner = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar current = openSet[winner];\n\t\tlastCheckedNode = current;\n\n\t\t//make sure if it finished\n\t\tif (current === endNode) {\n\t\t\t//console.log(\"DONE!\");\n\t\t\treturn closedSet;\n\t\t}\n\n\t\t//Best solution gets put into closedSet from openSet\n\t\tremoveFromArray(openSet, current);\n\t\tclosedSet.push(current);\n\n\t\t//check all the neighbours\n\t\tvar neighbours = checkNeighbourNodes(current, grid);\n\n\t\tfor (var j = 0; j < neighbours.length; j++) {\n\t\t\tvar neighbour = neighbours[j];\n\n\t\t\t//checks if its a valid spot\n\t\t\tif (!closedSet.includes(neighbour)) {\n\t\t\t\t//is it better then previous\n\t\t\t\tvar tempG = current.distance + heuristic(neighbour, current);\n\n\t\t\t\t//is this a better path ??\n\t\t\t\tif (!openSet.includes(neighbour)) {\n\t\t\t\t\topenSet.push(neighbour);\n\t\t\t\t} else if (tempG >= neighbour.distance) {\n\t\t\t\t\t//naw, its a better path\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tneighbour.distance = tempG;\n\t\t\t\tneighbour.h = heuristic(neighbour, endNode);\n\n\t\t\t\tneighbour.f = neighbour.distance + neighbour.h;\n\t\t\t\tneighbour.previousNode = current;\n\t\t\t}\n\t\t}\n\t\tcontinue;\n\t}\n}\n\n//checks every neighbour node, and checks if its a wall\nfunction checkNeighbourNodes(node, grid) {\n\tconst { row, col } = node;\n\tconst neighbourNodes = [];\n\n\t//top-left\n\t//if (row > 0 && col > 0) neighbourNodes.push(grid[row - 1][col - 1]);\n\t//top\n\tif (row > 0) neighbourNodes.push(grid[row - 1][col]);\n\t//top-right\n\t// if (row > 0 && col < grid[0].length - 1)\n\t// \tneighbourNodes.push(grid[row - 1][col + 1]);\n\t//right\n\tif (col < grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\n\t//bottom-right\n\t// if (row < grid.length - 1 && col < grid[0].length - 1)\n\t// \tneighbourNodes.push(grid[row + 1][col + 1]);\n\t//bottom\n\tif (row < grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\n\t//bottom-left\n\t// if (row < grid.length - 1 && col > 0)\n\t// \tneighbourNodes.push(grid[row + 1][col - 1]);\n\t//left\n\tif (col > 0) neighbourNodes.push(grid[row][col - 1]);\n\n\t//important to not just to return the avaliable nodes but to check if the nodes are walls as well\n\treturn neighbourNodes.filter(neighbourNodes => !neighbourNodes.isWall);\n}\n\n//a guess of how far it is between two points, using Euclidean distance equation\nfunction heuristic(a, b) {\n\treturn Math.sqrt(Math.pow(a.row - b.row, 2) + Math.pow(a.col - b.col, 2));\n}\n\n//function to delete elements from the array\n//its a decrement due to the updates\nfunction removeFromArray(arr, elt) {\n\tfor (var i = arr.length; i >= 0; i--) {\n\t\tif (arr[i] === elt) {\n\t\t\tarr.splice(i, 1);\n\t\t}\n\t}\n}\n\n//returns a array with the shortest path\nexport function shortestPath(endNode) {\n\tconst nodesInShortestPath = [];\n\tlet currentNode = endNode;\n\twhile (currentNode !== null) {\n\t\tnodesInShortestPath.unshift(currentNode);\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\treturn nodesInShortestPath;\n}\n","export function randomWalls(grid, RandomNumberMax) {\n\tconst allNodes = getNodes(grid);\n\tconst walls = [];\n\n\tfor (let i = 0; i < allNodes.length; i++) {\n\t\tvar randomnumber = getRandomNumber(RandomNumberMax);\n\n\t\tif (randomnumber === 1) {\n\t\t\tif (allNodes[i].isStart || allNodes[i].isEnd) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tallNodes[i].isWall = true;\n\t\t\twalls.push(allNodes[i]);\n\t\t}\n\t}\n\treturn walls;\n}\n\nfunction getRandomNumber(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction getNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tfor (const node of row) {\n\t\t\tnodes.push(node);\n\t\t}\n\t}\n\treturn nodes;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\n\nimport { dijkstra, getNodesInShortestPath } from \"../algorithms/dijkstra\";\nimport { maze } from \"../algorithms/maze\";\nimport { aStar, shortestPath } from \"../algorithms/a-star\";\nimport { randomWalls } from \"../algorithms/randomWalls\";\n\nimport \"./VisualizerDataStructure.css\";\n\n//Create the Grid size, (row = x , col = y)\nconst GRID_ROW = 15;\nconst GRID_COL = 55;\n\n//start node cords\nconst IS_START_ROW = 1;\nconst IS_START_COL = 1;\n\n//end node cords\nconst IS_END_ROW = GRID_ROW - 2;\nconst IS_END_COL = GRID_COL - 2;\n\nexport default class VisualizerDataStructure extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false\n\t\t};\n\t}\n\n\t//creates the grid, pre defined functions name, invoked immediately after a component is mounted\n\tcomponentDidMount() {\n\t\tconst grid = initialGrid();\n\t\tthis.setState({ grid });\n\t}\n\n\t//mouse events, the function names are built in the react; Mouse Events\n\n\t//if mouse is pressed down\n\thandleMouseDown(row, col) {\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\n\t}\n\t//this is if the mouse is pressed down and is dragged\n\thandleMouseEnter(row, col) {\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid });\n\t}\n\t//when the mouse btn is unpressed\n\thandleMouseUp() {\n\t\tthis.setState({ mouseIsPressed: false });\n\t}\n\t//need to add a button press that adds the start node and end node manually\n\n\t/*\n\n\t\tutilites\n\n\t*/\n\n\tanimationClear() {\n\t\tconst { grid } = this.state;\n\t\tfor (let row = 0; row < GRID_ROW; row++) {\n\t\t\tfor (let col = 0; col < GRID_COL; col++) {\n\t\t\t\tif (grid[row][col].isEnd || grid[row][col].isStart) {\n\t\t\t\t\tif (grid[row][col].isEnd) {\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t`node-${row}-${col}`\n\t\t\t\t\t\t).className = \"node node-end\";\n\t\t\t\t\t}\n\t\t\t\t\tif (grid[row][col].isStart) {\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t`node-${row}-${col}`\n\t\t\t\t\t\t).className = \"node node-start\";\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tgrid[row][col].isVisited = false;\n\t\t\t\tgrid[row][col].previousNode = null;\n\t\t\t\tgrid[row][col].isWall = false;\n\t\t\t\tgrid[row][col].Infinity = true;\n\t\t\t\tgrid[row][col].distance = Infinity;\n\t\t\t\tgrid[row][col].f = 0;\n\t\t\t\tgrid[row][col].h = 0;\n\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className =\n\t\t\t\t\t\"node\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\n\t\tDijkstras\n\n\t*/\n\tanimatedDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\t\t\tif (i === visitedNodesInOrder.length) {\n\t\t\t\t//this is when the endnode\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animatedShortestPath(nodesInShortestPathOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//actual animation\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\t\tconst firstNode = visitedNodesInOrder[i + 1];\n\t\t\t\tif (firstNode === undefined) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode ===\n\t\t\t\t\t\tvisitedNodesInOrder[visitedNodesInOrder.length - 1]\n\t\t\t\t\t) {\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t\t\t).className = \"node node-visited\";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${firstNode.row}-${firstNode.col}`\n\t\t\t\t).className = \"node node-current\";\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-visited\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\tanimatedShortestPath(nodesInShortestPathOrder) {\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-shortest-path\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\t//Initialising the Dijksta Algorithm\n\tdijkstraAlgorithm() {\n\t\tconst { grid } = this.state;\n\t\tconst startNode = grid[IS_START_ROW][IS_START_COL];\n\t\tconst endNode = grid[IS_END_ROW][IS_END_COL];\n\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(endNode);\n\t\tthis.animatedDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t}\n\n\t/*\n\n\t\tA-Star\n\n\t*/\n\n\t// Animation for A-Star\n\taStarAnimation(vistedNodes, shortestPathInOrder) {\n\t\tfor (let i = 0; i < vistedNodes.length + 1; i++) {\n\t\t\tif (i === vistedNodes.length) {\n\t\t\t\t//this is when the endnode\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animatedShortestPathAStar(shortestPathInOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = vistedNodes[i];\n\t\t\t\tconst firstNode = vistedNodes[i + 1];\n\t\t\t\tif (firstNode === undefined) {\n\t\t\t\t\tif (node === vistedNodes[vistedNodes.length - 1]) {\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t\t\t).className = \"node node-visited\";\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${firstNode.row}-${firstNode.col}`\n\t\t\t\t).className = \"node node-current\";\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-visited\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\t//short path animation for A-Star\n\tanimatedShortestPathAStar(shortestPathInOrder) {\n\t\tfor (let i = 0; i < shortestPathInOrder.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = shortestPathInOrder[i];\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-shortest-path\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\t//Initialising the A-star Algorithm\n\taStarAlgorithm() {\n\t\tconst { grid } = this.state;\n\t\tconst startNode = grid[IS_START_ROW][IS_START_COL];\n\t\tconst endNode = grid[IS_END_ROW][IS_END_COL];\n\t\tconst vistedNodes = aStar(grid, startNode, endNode);\n\t\tconst shortestPathInOrder = shortestPath(endNode);\n\t\tthis.aStarAnimation(vistedNodes, shortestPathInOrder);\n\t}\n\n\t/*\n\n\t\tMaze creation (its more of a prism's algorithm)\n\n\t*/\n\n\tmazeGenerationAnimation(nodesVisited) {\n\t\tfor (let i = 0; i < nodesVisited.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = nodesVisited[i];\n\t\t\t\tconst firstNode = nodesVisited[i + 1];\n\t\t\t\tif (firstNode === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${firstNode.row}-${firstNode.col}`\n\t\t\t\t).className = \"node node-current\";\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-visited\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\tmazeAlgorithm() {\n\t\tconst { grid } = this.state;\n\t\tconst startNode = grid[IS_START_ROW][IS_START_COL];\n\t\tconst nodesVisited = maze(grid, startNode);\n\t\tthis.mazeGenerationAnimation(nodesVisited);\n\t}\n\n\t/*\n\n\t\tRandom Walls Script\n\n\t*/\n\n\trandomWallsAnimation(wallList) {\n\t\tfor (let i = 0; i < wallList.length; i++) {\n\t\t\tconst node = wallList[i];\n\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t\t\"node node-wall\";\n\t\t}\n\t}\n\trandomWallsAlgorithm() {\n\t\tconst { grid } = this.state;\n\t\tconst wallList = randomWalls(grid, 4);\n\t\tthis.randomWallsAnimation(wallList);\n\t}\n\n\trender() {\n\t\tconst { grid, mouseIsPressed } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"Different-Algorithms\">\n\t\t\t\t\t<button onClick={() => this.dijkstraAlgorithm()}>\n\t\t\t\t\t\tDijkstra Algorithm\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => this.aStarAlgorithm()}>\n\t\t\t\t\t\tA* Search\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button onClick={() => this.mazeAlgorithm()}>\n\t\t\t\t\t\tPrism's Algorithm\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => this.randomWallsAlgorithm()}>\n\t\t\t\t\t\tRandom Walls\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => this.animationClear()}>\n\t\t\t\t\t\tClear Grid\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Grid\">\n\t\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t\t\t\tisStart,\n\t\t\t\t\t\t\t\t\t\tisEnd,\n\t\t\t\t\t\t\t\t\t\tisWall\n\t\t\t\t\t\t\t\t\t} = node;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\t\t\t\t\tisEnd={isEnd}\n\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseDown(row, col)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseEnter(row, col)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseUp()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n//how the grid is created\nconst initialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < GRID_ROW; row++) {\n\t\tconst currentRow = [];\n\t\tfor (let col = 0; col < GRID_COL; col++) {\n\t\t\tcurrentRow.push(createNode(row, col));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\treturn grid;\n};\n//object of a nod and the properties\nconst createNode = (row, col) => {\n\treturn {\n\t\trow,\n\t\tcol,\n\t\tdistance: Infinity, //in A* its the 'g'\n\t\tisStart: row === IS_START_ROW && col === IS_START_COL,\n\t\tisEnd: row === IS_END_ROW && col === IS_END_COL,\n\t\tisVisited: false,\n\t\tisWall: false,\n\t\tpreviousNode: null,\n\t\t//this is for the A* path\n\t\tf: 0,\n\t\th: 0\n\t};\n};\n\n//creating the walls\nconst drawWallsToggle = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node, //iterates through a array of node\n\t\tisWall: !node.isWall\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport VisualizerDataStructure from \"./dataStructures/VisualizerDataStructure\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<VisualizerDataStructure></VisualizerDataStructure>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}