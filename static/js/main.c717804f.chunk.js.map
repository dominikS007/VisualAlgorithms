{"version":3,"sources":["dataStructures/Node/Node.jsx","algorithms/dijkstra.js","dataStructures/VisualizerDataStructure.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","endNode","distance","visitedNodesInOrder","unvistedNodes","nodes","node","push","getNodes","length","sortNodesbyDistance","closestNode","shift","Infinity","isVisited","updateUnvistedNodes","neighbourNodes","filter","getUnvistedNodes","neighbor","previousNode","sort","nodeA","nodeB","VisualizerDataStructure","mouseIsPressed","initialGrid","setState","newGrid","drawWallsToggle","nodesInShortestPathOrder","i","setTimeout","animatedShortestPath","document","getElementById","nodesInShortestPath","currentNode","unshift","getNodesInShortestPath","animatedDijkstra","console","log","alert","onClick","dijkstraAlgorithm","aStarAlgorithm","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c717804f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisStart,\n\t\t\tisEnd,\n\t\t\tisWall,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseUp\n\t\t} = this.props;\n\t\tconst extraClassName = isEnd\n\t\t\t? \"node-end\"\n\t\t\t: isStart\n\t\t\t? \"node-start\"\n\t\t\t: isWall\n\t\t\t? \"node-wall\"\n\t\t\t: \"\";\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`node-${row}-${col}`}\n\t\t\t\tclassName={`node ${extraClassName}`}\n\t\t\t\tonMouseDown={() => onMouseDown(row, col)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t\tonMouseUp={() => onMouseUp()}\n\t\t\t></div>\n\t\t);\n\t}\n}\n","export function dijkstra(grid, startNode, endNode) {\n\tstartNode.distance = 0;\n\tconst visitedNodesInOrder = [];\n\tconst unvistedNodes = getNodes(grid);\n\twhile (!!unvistedNodes.length) {\n\t\tsortNodesbyDistance(unvistedNodes); // subs the two nodes\n\t\tconst closestNode = unvistedNodes.shift(); //will take the first element of the array and put in the varable\n\t\t//if the node is a wall\n\t\tif (closestNode.isWall) {\n\t\t\tcontinue;\n\t\t}\n\t\t//if the node is a node that has a value of infinity\n\t\t//which is a normal node so are we are \"stuck\"\n\t\tif (closestNode === Infinity) {\n\t\t\treturn visitedNodesInOrder;\n\t\t}\n\t\tclosestNode.isVisited = true; // it has been visted so we set it to true\n\t\tvisitedNodesInOrder.push(closestNode); // then we will push the the array the closest node\n\t\t//when the closest node has reached the end node\n\t\tif (closestNode === endNode) return visitedNodesInOrder;\n\t\t//call the function that will increate the range of the search\n\t\tupdateUnvistedNodes(closestNode, grid);\n\t}\n}\n\n//functions that checks every node around it, in a cross shape\nfunction getUnvistedNodes(node, grid) {\n\tconst { row, col } = node;\n\tconst neighbourNodes = [];\n\tif (row > 0) neighbourNodes.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\n\tif (col > 0) neighbourNodes.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\n\treturn neighbourNodes.filter(neighbourNodes => !neighbourNodes.isVisited);\n}\n\n//updates the visited nodes\nfunction updateUnvistedNodes(node, grid) {\n\tconst unvistedNodes = getUnvistedNodes(node, grid);\n\tfor (const neighbor of unvistedNodes) {\n\t\tneighbor.distance = node.distance + 1;\n\t\tneighbor.previousNode = node;\n\t}\n}\n\nfunction getNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tfor (const node of row) {\n\t\t\tnodes.push(node);\n\t\t}\n\t}\n\treturn nodes;\n}\n\nfunction sortNodesbyDistance(unvistedNodes) {\n\tunvistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nexport function getNodesInShortestPath(endNode) {\n\tconst nodesInShortestPath = [];\n\tlet currentNode = endNode;\n\twhile (currentNode !== null) {\n\t\tnodesInShortestPath.unshift(currentNode);\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\treturn nodesInShortestPath;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\n\nimport { dijkstra, getNodesInShortestPath } from \"../algorithms/dijkstra\";\n\nimport \"./VisualizerDataStructure.css\";\n\n//Create the Grid size, (row = x , col = y)\nconst GRID_ROW = 15;\nconst GRID_COL = 60;\n\n//start node cords\nconst IS_START_ROW = 2;\nconst IS_START_COL = 2;\n\n//end node cords\nconst IS_END_ROW = 12;\nconst IS_END_COL = 55;\n\nexport default class VisualizerDataStructure extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false\n\t\t};\n\t}\n\n\t//creates the grid, pre defined functions name, invoked immediately after a component is mounted\n\tcomponentDidMount() {\n\t\tconst grid = initialGrid();\n\t\tthis.setState({ grid });\n\t}\n\n\t//mouse events, the function names are built in the react; Mouse Events\n\n\t//if mouse is pressed down\n\thandleMouseDown(row, col) {\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\n\t}\n\t//this is if the mouse is pressed down and is dragged\n\thandleMouseEnter(row, col) {\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid });\n\t}\n\t//when the mouse btn is unpressed\n\thandleMouseUp() {\n\t\tthis.setState({ mouseIsPressed: false });\n\t}\n\t/*\n\n\t\tDijkstras\n\n\t*/\n\tanimatedDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\t\t\tif (i === visitedNodesInOrder.length) {\n\t\t\t\t//this is when the endnode\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.animatedShortestPath(nodesInShortestPathOrder);\n\t\t\t\t}, 10 * i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = visitedNodesInOrder[i];\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-visited\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\n\tanimatedShortestPath(nodesInShortestPathOrder) {\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t`node-${node.row}-${node.col}`\n\t\t\t\t).className = \"node node-shortest-path\";\n\t\t\t}, 10 * i);\n\t\t}\n\t}\n\n\t//Initialising the Dijksta Algorithm\n\tdijkstraAlgorithm() {\n\t\tconst { grid } = this.state;\n\t\tconst startNode = grid[IS_START_ROW][IS_START_COL];\n\t\tconst endNode = grid[IS_END_ROW][IS_END_COL];\n\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPath(endNode);\n\t\tthis.animatedDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t\t// console.log(visitedNodesInOrder);\n\t}\n\n\t/*\n\n\t\tA-Star\n\n\t*/\n\t//Initialising the A-star Algorithm\n\taStarAlgorithm() {\n\t\tconsole.log(\"not implement yet\");\n\t\talert(\"not implement yet\");\n\t}\n\n\trender() {\n\t\tconst { grid, mouseIsPressed } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"Different-Algorithms\">\n\t\t\t\t\t<button onClick={() => this.dijkstraAlgorithm()}>\n\t\t\t\t\t\tDijkstra Algorithm\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => this.aStarAlgorithm()}>\n\t\t\t\t\t\tA* Search\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Grid\">\n\t\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t\t\t\tisStart,\n\t\t\t\t\t\t\t\t\t\tisEnd,\n\t\t\t\t\t\t\t\t\t\tisWall\n\t\t\t\t\t\t\t\t\t} = node;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\t\t\t\t\tisEnd={isEnd}\n\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseDown(row, col)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseEnter(row, col)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseUp()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n//how the grid is created\nconst initialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < GRID_ROW; row++) {\n\t\tconst currentRow = [];\n\t\tfor (let col = 0; col < GRID_COL; col++) {\n\t\t\tcurrentRow.push(createNode(row, col));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\treturn grid;\n};\n//object of a nod and the properties\nconst createNode = (row, col) => {\n\treturn {\n\t\trow,\n\t\tcol,\n\t\tdistance: Infinity,\n\t\tisStart: row === IS_START_ROW && col === IS_START_COL,\n\t\tisEnd: row === IS_END_ROW && col === IS_END_COL,\n\t\tisVisited: false,\n\t\tisWall: false,\n\t\tpreviousNode: null\n\t};\n};\n\n//creating the walls\nconst drawWallsToggle = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node, //iterates through a array of node\n\t\tisWall: !node.isWall\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport VisualizerDataStructure from \"./dataStructures/VisualizerDataStructure\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<VisualizerDataStructure></VisualizerDataStructure>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}