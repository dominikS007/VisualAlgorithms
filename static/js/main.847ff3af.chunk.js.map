{"version":3,"sources":["dataStructures/Node/Node.jsx","dataStructures/VisualizerDataStructure.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","VisualizerDataStructure","grid","mouseIsPressed","initialGrid","setState","newGrid","drawWallsToggle","map","rowIdx","key","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","push","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.847ff3af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisStart,\n\t\t\tisEnd,\n\t\t\tisWall,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseUp\n\t\t} = this.props;\n\t\tconst extraClassName = isEnd\n\t\t\t? \"node-end\"\n\t\t\t: isStart\n\t\t\t? \"node-start\"\n\t\t\t: isWall\n\t\t\t? \"node-wall\"\n\t\t\t: \"\";\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`node-${row}-${col}`}\n\t\t\t\tclassName={`node ${extraClassName}`}\n\t\t\t\tonMouseDown={() => onMouseDown(row, col)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t\tonMouseUp={() => onMouseUp()}\n\t\t\t></div>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\n\nimport \"./VisualizerDataStructure.css\";\n\nexport default class VisualizerDataStructure extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false\n\t\t};\n\t}\n\n\t//creates the grid\n\tcomponentDidMount() {\n\t\tconst grid = initialGrid();\n\t\tthis.setState({ grid });\n\t}\n\n\t//mouse events\n\thandleMouseDown(row, col) {\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\n\t}\n\thandleMouseEnter(row, col) {\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = drawWallsToggle(this.state.grid, row, col);\n\t\tthis.setState({ grid: newGrid });\n\t}\n\thandleMouseUp() {\n\t\tthis.setState({ mouseIsPressed: false });\n\t}\n\n\trender() {\n\t\tconst { grid, mouseIsPressed } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"Grid\">\n\t\t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t\t\tisStart,\n\t\t\t\t\t\t\t\t\tisEnd,\n\t\t\t\t\t\t\t\t\tisWall\n\t\t\t\t\t\t\t\t} = node;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\t\t\t\tisEnd={isEnd}\n\t\t\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseDown(row, col)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\n\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseEnter(row, col)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n//how the grid is created\nconst initialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < 15; row++) {\n\t\tconst currentRow = [];\n\t\tfor (let col = 0; col < 60; col++) {\n\t\t\tcurrentRow.push(createNode(row, col));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\treturn grid;\n};\n//object of a nod and the properties\nconst createNode = (row, col) => {\n\treturn {\n\t\trow,\n\t\tcol,\n\t\tisStart: row === 3 && col === 3,\n\t\tisEnd: row === 9 && col === 55,\n\t\tisWall: false\n\t};\n};\n\n//creating the walls\nconst drawWallsToggle = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t\t...node,\n\t\tisWall: !node.isWall\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport VisualizerDataStructure from \"./dataStructures/VisualizerDataStructure\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<VisualizerDataStructure></VisualizerDataStructure>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}